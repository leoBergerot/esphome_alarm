# scripts/lcd_scroll_line.yaml

- id: lcd_scroll_line
  mode: restart
  parameters:
    line0: string
    line1: string
  then:
    - lambda: |-
        id(offset) = 0;  // Reset offset at each start
        if (id(lcd_screen).is_failed()) {
          ESP_LOGW("alarm", "No LCD screen");
          return;
        }

        // disable scrolling
        id(stop_scroll).execute();

        const int width = 16;
        int line1_length = line1.length();

        // Display the first line (static)
        id(lcd_screen).print(0, 0, line0.substr(0, width).c_str());
        id(lcd_screen).display();

        // If the second line is short, display statically
        if (line1_length <= width) {
          id(lcd_screen).print(0, 1, line1.c_str());
          id(lcd_screen).display();
          return;
        } else {
          // Activate scrolling
          id(scroll_active) = true;
        } 

    - while:
        condition: 
          lambda: |-
            return id(scroll_active) == true;
        then:
          - lambda: |-
              if (!id(scroll_active)) {
                ESP_LOGW("alarm", "Scrolling stopped");
                return;
              }

              const int width = 16;

              // Create scrolling text with padding for continuity
              std::string padded = line1 + "    " + line1.substr(0, width - 1);

              // Display the scrolling text
              id(lcd_screen).print(0, 1, padded.substr(id(offset), width).c_str());
              id(lcd_screen).display();

              // Update the offset for the next iteration
              id(offset) = (id(offset) + 1) % (line1.length() + 1);

          - delay: 400ms

# Script to stop scrolling
- id: stop_scroll
  mode: restart
  then:
    - lambda: |-
        ESP_LOGW("alarm", "Stopping LCD scroll");
        id(scroll_active) = false;
        // Clear the display when stopping
        id(lcd_screen).clear();
        id(lcd_screen).display();